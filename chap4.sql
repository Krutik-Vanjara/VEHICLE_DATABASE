ALTER SESSION SET CURRENT_SCHEMA = C##car_schema;

------Prints a message to the console every time a new record is added to CarDetails.
CREATE OR REPLACE TRIGGER trg_update_statistics
AFTER INSERT ON C##car_schema.CarDetails
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('A new car record was inserted with Car_ID: ' || :NEW.Car_ID);
END;

-- Creating a log table to store information about deleted records
CREATE TABLE C##car_schema.Log_Delete_Specifications (
    Log_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique identifier for each log entry
    Spec_ID NUMBER, -- The ID of the specification that was deleted
    Deleted_On DATE DEFAULT SYSDATE -- The date and time when the deletion occurred (default is the current system date/time)
);

-- Creating a trigger to log deletions from the CarSpecifications table
CREATE OR REPLACE TRIGGER trg_log_deletions
BEFORE DELETE ON C##car_schema.CarSpecifications -- Trigger fires before a DELETE operation on CarSpecifications
FOR EACH ROW -- Trigger executes once for each row affected
BEGIN
    -- Insert the deleted Spec_ID into the log table
    INSERT INTO C##car_schema.Log_Delete_Specifications (Spec_ID)
    VALUES (:OLD.Spec_ID); -- :OLD refers to the row values before deletion
END;

-- Trigger to prevent DELETE or UPDATE by the regular user
CREATE OR REPLACE TRIGGER trg_restrict_regular_user
BEFORE DELETE OR UPDATE ON C##car_schema.CarDetails -- Applies to DELETE or UPDATE on CarDetails table
FOR EACH ROW
BEGIN
    -- Check the user attempting the operation
    IF SYS_CONTEXT('USERENV', 'SESSION_USER') = 'C##REGULAR_USER' THEN
        -- Raise an exception with a custom error message
        RAISE_APPLICATION_ERROR(-20001, 'You don''t have sufficient privileges');
    END IF;
END;

-------Step 2: Stored Functions and Procedures

-- Create a function to calculate the total car value
CREATE OR REPLACE FUNCTION get_total_car_value
RETURN NUMBER IS
    total_value NUMBER; -- Variable to store the total value
BEGIN
    -- SQL query to calculate the sum of the Price column
    SELECT SUM(Price)
    INTO total_value
    FROM C##car_schema.CarDetails;

    -- Return the calculated total value
    RETURN total_value;
END;

-- Call the function in a SELECT statement
SELECT get_total_car_value() AS Total_Value FROM DUAL;

-- Create a function to calculate the total car value for a specific company
CREATE OR REPLACE FUNCTION get_total_car_value_by_make (
    p_make IN VARCHAR2 -- Input parameter for the company name
) 
RETURN NUMBER IS
    total_value NUMBER; -- Variable to store the total value
BEGIN
    -- SQL query to calculate the sum of the Price column for the specified company
    SELECT SUM(Price)
    INTO total_value
    FROM C##car_schema.CarDetails
    WHERE Make = p_make; -- Filter by the company name (Make)

    -- Return the calculated total value
    RETURN NVL(total_value, 0); -- Return 0 if no cars are found for the company
END;
/

-- Get the total car value for Toyota
SELECT get_total_car_value_by_make('Toyota') AS Total_Value FROM DUAL;

-- Get the total car value for Honda
SELECT get_total_car_value_by_make('Honda') AS Total_Value FROM DUAL;

-- Create a procedure to update the price of a car
CREATE OR REPLACE PROCEDURE update_car_price (
    p_car_id IN NUMBER,
    p_new_price IN NUMBER
) AS
BEGIN
    -- Update the price of the specified car
    UPDATE C##car_schema.CarDetails
    SET Price = p_new_price
    WHERE Car_ID = p_car_id;

    -- Commit the transaction
    COMMIT;
END;

-- Call the procedure to update the price of a car
BEGIN
    update_car_price(1, 25000);
END;

-- Create a procedure to count cars based on fuel type and location
CREATE OR REPLACE PROCEDURE get_car_count_by_location (
    p_location IN VARCHAR2, -- Input parameter for location
    p_fuel_type IN VARCHAR2, -- Input parameter for fuel type
    car_count OUT NUMBER -- Output parameter to return the count
) AS
BEGIN
    -- Query to count the number of cars based on location and fuel type
    SELECT COUNT(*)
    INTO car_count
    FROM C##car_schema.CarDetails
    WHERE Location = p_location AND Fuel_Type = p_fuel_type;
END;
/

DECLARE
    count_result NUMBER; -- Variable to store the result
BEGIN
    -- Call the procedure and pass location and fuel type
    get_car_count_by_location('Pune', 'Petrol', count_result);

    -- Display the result
    DBMS_OUTPUT.PUT_LINE('Number of cars in Pune with Petrol: ' || count_result);
END;
/


